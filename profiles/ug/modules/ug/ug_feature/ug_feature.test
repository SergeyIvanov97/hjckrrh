<?php

/**
 * @file
 * Tests for ug_feature.module.
 */

/**
 * Test UG Feature
 */
class UGFeatureTestCase extends TaxonomyWebTestCase {

  protected $no_results_text = 'No results found.';
  protected $more_text = 'More features';

  public static function getInfo() {
    return array(
      'name' => 'UG Feature',
      'description' => 'Test the UG Feature feature.',
      'group' => 'UG',
    );
  }

  function setUp() {
    $this->profile = 'ug';
    parent::setup('ug_feature', 'ug_feature_layouts');
    theme_enable(array('ug_cornerstone'));
    theme_disable(array('bartik'));
    variable_set('theme_default', 'ug_cornerstone');
  }

  function getListingPages() {
    return array(
      'features',
    );
  }

  function _testNoResultsBehavior() {
    /* Assert listing pages show 'no results found.' */
    foreach ($this->getListingPages() as $path) {
      $this->drupalGet($path);
      $this->assertText($this->no_results_text);
    }
    /* Assert that 'More features' button is hidden. */
    $this->drupalGet('');
    $this->assertNoText($this->more_text);
  }

  /**
   * Test URL aliases
   */
  function _testUrlAlias() {
    /* Create a node */
    $settings = array('type' => 'feature');
    $node1 = $this->drupalCreateNode($settings);
    /* Get node. */
    $this->drupalGet('node/' . $node1->nid);
    /* Test URL. */
    $expected_path = 'content/feature/' . strtolower($node1->title);
    $this->assertUrl($expected_path);
  }

  /**
   * Test alt text on feed link.
   */
  function _testFeed() {
    /* Create category term */
    $category = taxonomy_vocabulary_machine_name_load('feature_category');
    $term = $this->createTerm($category);
    /* Create node */
    $settings = array('type' => 'feature');
    $settings['field_feature_category'][LANGUAGE_NONE][0]['tid'] = $term->tid;
    $node = $this->drupalCreateNode($settings);
    /* Assert feed icon alt text contains category name */
    $view_content = views_embed_view('ft3', 'panel_pane_1', $term->tid);
    $this->verbose($view_content);
    $alttext = "alt=\"Subscribe to $term->name\"";
    $status = strpos($view_content, $alttext);
    $this->assert(!!$status, "$alttext found");
  }
  
  /**
   * Testing FT2 view with category argument and keyword argument
   **/
  function testFeatureCategoryAndKeyword() {
    /* Create categories for features */
    $featurescats = taxonomy_vocabulary_machine_name_load('feature_category');
    $term1 = $this->createTerm($featurescats);
    $term2 = $this->createTerm($featurescats);
    
    /* Create keywords for features */
    $tags = taxonomy_vocabulary_machine_name_load('tags');
    $term3 = $this->createTerm($tags);
    $term4 = $this->createTerm($tags);

    /* Create 2 Features */
    $settings1 = array();
    $settings1['type'] = 'feature';
    
    $settings2 = array();
    $settings2['type'] = 'feature';
    
    $settings1['field_feature_category'][LANGUAGE_NONE][0]['tid'] = $term1->tid;
    $settings1['field_tags'][LANGUAGE_NONE][0]['tid'] = $term3->tid;
    $node1 = $this->drupalCreateNode($settings1);

    $settings2['field_feature_category'][LANGUAGE_NONE][0]['tid'] = $term2->tid;
    $settings2['field_tags'][LANGUAGE_NONE][0]['tid'] = $term4->tid;
    $node2 = $this->drupalCreateNode($settings2);
   
    /* Get feed. */
    $this->drupalGet('features');

    /* Test page title. */
    $this->assertText("Features");

    /* There should be both titles*/
    $this->assertText($node1->title);
    $this->assertText($node2->title);
    
    /*Go to features/term1 */
    $this->drupalGet('features/'. $term1->tid);
    /* There should be one title */
    $this->assertText($node1->title);
    $this->assertNoText($node2->title);

    /*Go to features/term2 */
    $this->drupalGet('features/'. $term2->tid);
    /* There should be one title */
    $this->assertText($node2->title);
    $this->assertNoText($node1->title);
    
    /*Go to features/term3 */
    $this->drupalGet('features/'. $term3->tid);
    /* There should be one title */
    $this->assertText($node1->title);
    $this->assertNoText($node2->title);
    
    /*Go to features/term4 */
    $this->drupalGet('features/'. $term4->tid);
    /* There should be one title */
    $this->assertText($node2->title);
    $this->assertNoText($node1->title);
  }
  
}


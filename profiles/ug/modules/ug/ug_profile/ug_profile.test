<?php

/**
 * @file
 * Tests for ug_profile.module.
 */

/**
 * Test UG Profile feature.
 */
class UGProfileTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'UG Profile',
      'description' => 'Test the UG Profile feature.',
      'group' => 'UG',
    );
  }

  function setUp() {
    $this->profile = 'ug';
    parent::setUp('ug_profile', 'ug_profile_layouts');
    theme_enable(array('ug_cornerstone'));
    theme_disable(array('bartik'));
    variable_set('theme_default', 'ug_cornerstone');
  }

  /**
   * Test PP1 - Listing page for multiple profiles
   */
  function testListingPage() {
    $node = array();
    $node['type'] = 'profile';
    $node['field_profile_name'][LANGUAGE_NONE][0]['value'] = $this->randomName(8);
    $node['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $this->randomName(8);
    $node['field_profile_title'][LANGUAGE_NONE][0]['value'] = $this->randomName(16);
    $this->drupalCreateNode($node);
    $this->drupalGet('people');
    $this->assertText($node['field_profile_title'][LANGUAGE_NONE][0]['value']);

    $pattern = "//button[@name='']";
    $elements = $this->xpath($pattern);
    $this->assertTrue(empty($elements), 'The filter button does not have empty name attribute.');
  }

  /**
   * Test node title
   */
  function testNodeTitle() {
    $name = $this->randomName(8);
    $last = "O'".$this->randomName(8); // Last name with apostrophe.
    $title = $name . " " . $last;
    $settings = array();
    $settings['type'] = 'profile';
    $settings['field_profile_name'][LANGUAGE_NONE][0]['value'] = $name;
    $settings['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $last;
    $node = $this->drupalCreateNode($settings);
    $this->drupalGet('node/'.$node->nid);
    $this->assertText($title);
  }

  /**
   * Test grid view.
   */
  function testGridView() {
    $this->drupalGet('people/faces');
    $node_list = $this->xpath('span > figure');
    $this->assertTrue(empty($node_list));
  }

  /**
   * Test uninstall hook behaviour.
   */
  function testHookUninstall() {
    /* Assert content type exists. */
    $this->assertTrue(node_type_get_type('profile'));
    /* Assert custom field exists (assume the rest are there). */
    $this->assertNotNull(field_info_field('field_profile_address'));    
    /* Disable and uninstall the feature. */
    module_disable(array('ug_profile', 'ug_profile_layouts'));
    drupal_uninstall_modules(array('ug_profile', 'ug_profile_layouts'));
    /* Assert profile type has been removed. */
    $this->assertFalse(node_type_get_type('profile'));
    /* Assert custom field has been deleted. */
    $this->assertNull(field_info_field('field_profile_address'));
  }

  /**
   * Test URL aliases
   */
  function testUrlAlias() {
    /* Generate data */
    $name = $this->randomName();
    $lastname = $this->randomName();
    /* Create a node */
    $settings = array('type' => 'profile');
    $settings['field_profile_name'][LANGUAGE_NONE][0]['value'] = $name;
    $settings['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $lastname;
    $node1 = $this->drupalCreateNode($settings);
    /* Get node. */
    $this->drupalGet('node/' . $node1->nid);
    /* Test URL. */
    $expected_path = 'people/' . strtolower($name) . '-' . strtolower($lastname);
    $this->assertUrl($expected_path);
  }

  /**
   * Test office label in teaser 
   */
  function testOfficeLabel() {
    // Generate data
    $name = $this->randomName();
    $lastname = $this->randomName();
    $office = $this->randomName();
    
    // Create node
    $settings = array('type' => 'profile');
    $settings['field_profile_name'][LANGUAGE_NONE][0]['value'] = $name;
    $settings['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $lastname;
    $node = $this->drupalCreateNode($settings);
    
    // Get listing page
    $this->drupalGet('people/');
    
    // Test office not present
    $this->assertNoText("Office:");
    
    // Add node
    $settings['field_profile_office'][LANGUAGE_NONE][0]['value'] = $office;
    $node2 = $this->drupalCreateNode($settings);
    
    // Get listing page
    $this->drupalGet('people/');
    
    // Test office present
    $this->assertText("Office:");
  }
}

